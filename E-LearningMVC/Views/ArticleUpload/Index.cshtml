@*@model C_Models.GetIssuesData

    @Html.DropDownListFor(model => model.Display1Types, new SelectList(Model.Display1Types), "Select Display1 Type", new { @class = "form-control" })
    @Html.DropDownListFor(model => model.Display2Types, new SelectList(Model.Display2Types), "Select Display2 Type", new { @class = "form-control" })*@


@model C_Models.ArticleUpload

@using (Html.BeginForm("Create", "ArticleUploadController", FormMethod.Post))
{
    @Html.DropDownListFor(model => model.Display1Types, new SelectList(Model.Display1Types), "Select Display1 Type", new { @class = "form-control" })
    @Html.DropDownListFor(model => model.Display2Types, new SelectList(Model.Display2Types), "Select Display2 Type", new { @class = "form-control" })

    @*<button type="submit" class="btn btn-primary">Create</button>*@
    <div class="form-group">
        @Html.LabelFor(model => model.ArticleType, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.ArticleType, new SelectList(Model.Display1Types), "Select Display1 Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ArticleType, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RespectiveIssue, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.RespectiveIssue, new SelectList(Model.Display2Types), "Select Display2 Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.RespectiveIssue, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AuthorNames, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.AuthorNames, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.AuthorNames, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UploadArticleFile, htmlAttributes: new { @class = "control-label" })
        <input type="file" name="file" class="form-control-file" />
        @Html.ValidationMessageFor(model => model.UploadArticleFile, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PageNo, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.PageNo, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.PageNo, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ManuscriptNo, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.ManuscriptNo, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ManuscriptNo, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SubmissionDate, htmlAttributes: new { @class = "control-label" })
        @Html.TextBoxFor(model => model.SubmissionDate, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.SubmissionDate, "", new { @class = "text-danger" })
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
}